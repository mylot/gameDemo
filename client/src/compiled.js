/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _AppFacade = __webpack_require__(1);\n\n// import {resArray} from './resource';\n// import {StartScene} from './startScene';\n\ncc.game.onRealStart = function () {\n  // If referenced loading.js, please remove it\n  if (!cc.sys.isNative && document.getElementById('cocosLoading')) {\n    document.body.removeChild(document.getElementById('cocosLoading'));\n  }\n\n  // Pass true to enable retina display, on Android disabled by default to improve performance\n  cc.view.enableRetina(cc.sys.os === cc.sys.OS_IOS);\n\n  // Adjust viewport meta\n  cc.view.adjustViewPort(true);\n\n  // Uncomment the following line to set a fixed orientation for your game\n  cc.view.setOrientation(cc.ORIENTATION_PORTRAIT);\n\n  // Setup the resolution policy and design resolution size\n  cc.view.setDesignResolutionSize(640, 960, cc.ResolutionPolicy.SHOW_ALL);\n\n  // The game will be resized when browser size change\n  cc.view.resizeWithBrowserSize(true);\n\n  // load resources\n  // cc.LoaderScene.preload(resArray, () => {\n  //   cc.director.runScene(new StartScene());\n  // }, this);\n\n  // init mvc framework\n  const key = 'cocosDemo';\n  _AppFacade.AppFacade.getInstance(key).start();\n}; /**\r\n    * Created by leo on 2016/7/22.\r\n    */\n\n/*eslint-disable */\n/**\r\n * eslint-disable\r\n * A brief explanation for \"project.json\":\r\n * Here is the content of project.json file, this is the global configuration for your game, you can modify it to customize some behavior.\r\n * The detail of each field is under it.\r\n {\r\n    \"project_type\": \"javascript\",\r\n    // \"project_type\" indicate the program language of your project, you can ignore this field\r\n\r\n    \"debugMode\"     : 1,\r\n    // \"debugMode\" possible values :\r\n    //      0 - No message will be printed.\r\n    //      1 - cc.error, cc.assert, cc.warn, cc.log will print in console.\r\n    //      2 - cc.error, cc.assert, cc.warn will print in console.\r\n    //      3 - cc.error, cc.assert will print in console.\r\n    //      4 - cc.error, cc.assert, cc.warn, cc.log will print on canvas, available only on web.\r\n    //      5 - cc.error, cc.assert, cc.warn will print on canvas, available only on web.\r\n    //      6 - cc.error, cc.assert will print on canvas, available only on web.\r\n\r\n    \"showFPS\"       : true,\r\n    // Left bottom corner fps information will show when \"showFPS\" equals true, otherwise it will be hide.\r\n\r\n    \"frameRate\"     : 60,\r\n    // \"frameRate\" set the wanted frame rate for your game, but the real fps depends on your game implementation and the running environment.\r\n\r\n    \"noCache\"       : false,\r\n    // \"noCache\" set whether your resources will be loaded with a timestamp suffix in the url.\r\n    // In this way, your resources will be force updated even if the browser holds a cache of it.\r\n    // It's very useful for mobile browser debuging.\r\n\r\n    \"id\"            : \"gameCanvas\",\r\n    // \"gameCanvas\" sets the id of your canvas element on the web page, it's useful only on web.\r\n\r\n    \"renderMode\"    : 0,\r\n    // \"renderMode\" sets the renderer type, only useful on web :\r\n    //      0 - Automatically chosen by engine\r\n    //      1 - Forced to use canvas renderer\r\n    //      2 - Forced to use WebGL renderer, but this will be ignored on mobile browsers\r\n\r\n    \"engineDir\"     : \"frameworks/cocos2d-html5/\",\r\n    // In debug mode, if you use the whole engine to develop your game, you should specify its relative path with \"engineDir\",\r\n    // but if you are using a single engine file, you can ignore it.\r\n\r\n    \"modules\"       : [\"cocos2d\"],\r\n    // \"modules\" defines which modules you will need in your game, it's useful only on web,\r\n    // using this can greatly reduce your game's resource size, and the cocos console tool can package your game with only the modules you set.\r\n    // For details about modules definitions, you can refer to \"../../frameworks/cocos2d-html5/modulesConfig.json\".\r\n\r\n    \"jsList\"        : [\r\n    ]\r\n    // \"jsList\" sets the list of js files in your game.\r\n }\r\n *\r\n */\n/*eslint-enable */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9jbGllbnQvc3JjL21haW4uanM/OTdjMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBsZW8gb24gMjAxNi83LzIyLlxyXG4gKi9cclxuXHJcbi8qZXNsaW50LWRpc2FibGUgKi9cclxuLyoqXHJcbiAqIGVzbGludC1kaXNhYmxlXHJcbiAqIEEgYnJpZWYgZXhwbGFuYXRpb24gZm9yIFwicHJvamVjdC5qc29uXCI6XHJcbiAqIEhlcmUgaXMgdGhlIGNvbnRlbnQgb2YgcHJvamVjdC5qc29uIGZpbGUsIHRoaXMgaXMgdGhlIGdsb2JhbCBjb25maWd1cmF0aW9uIGZvciB5b3VyIGdhbWUsIHlvdSBjYW4gbW9kaWZ5IGl0IHRvIGN1c3RvbWl6ZSBzb21lIGJlaGF2aW9yLlxyXG4gKiBUaGUgZGV0YWlsIG9mIGVhY2ggZmllbGQgaXMgdW5kZXIgaXQuXHJcbiB7XHJcbiAgICBcInByb2plY3RfdHlwZVwiOiBcImphdmFzY3JpcHRcIixcclxuICAgIC8vIFwicHJvamVjdF90eXBlXCIgaW5kaWNhdGUgdGhlIHByb2dyYW0gbGFuZ3VhZ2Ugb2YgeW91ciBwcm9qZWN0LCB5b3UgY2FuIGlnbm9yZSB0aGlzIGZpZWxkXHJcblxyXG4gICAgXCJkZWJ1Z01vZGVcIiAgICAgOiAxLFxyXG4gICAgLy8gXCJkZWJ1Z01vZGVcIiBwb3NzaWJsZSB2YWx1ZXMgOlxyXG4gICAgLy8gICAgICAwIC0gTm8gbWVzc2FnZSB3aWxsIGJlIHByaW50ZWQuXHJcbiAgICAvLyAgICAgIDEgLSBjYy5lcnJvciwgY2MuYXNzZXJ0LCBjYy53YXJuLCBjYy5sb2cgd2lsbCBwcmludCBpbiBjb25zb2xlLlxyXG4gICAgLy8gICAgICAyIC0gY2MuZXJyb3IsIGNjLmFzc2VydCwgY2Mud2FybiB3aWxsIHByaW50IGluIGNvbnNvbGUuXHJcbiAgICAvLyAgICAgIDMgLSBjYy5lcnJvciwgY2MuYXNzZXJ0IHdpbGwgcHJpbnQgaW4gY29uc29sZS5cclxuICAgIC8vICAgICAgNCAtIGNjLmVycm9yLCBjYy5hc3NlcnQsIGNjLndhcm4sIGNjLmxvZyB3aWxsIHByaW50IG9uIGNhbnZhcywgYXZhaWxhYmxlIG9ubHkgb24gd2ViLlxyXG4gICAgLy8gICAgICA1IC0gY2MuZXJyb3IsIGNjLmFzc2VydCwgY2Mud2FybiB3aWxsIHByaW50IG9uIGNhbnZhcywgYXZhaWxhYmxlIG9ubHkgb24gd2ViLlxyXG4gICAgLy8gICAgICA2IC0gY2MuZXJyb3IsIGNjLmFzc2VydCB3aWxsIHByaW50IG9uIGNhbnZhcywgYXZhaWxhYmxlIG9ubHkgb24gd2ViLlxyXG5cclxuICAgIFwic2hvd0ZQU1wiICAgICAgIDogdHJ1ZSxcclxuICAgIC8vIExlZnQgYm90dG9tIGNvcm5lciBmcHMgaW5mb3JtYXRpb24gd2lsbCBzaG93IHdoZW4gXCJzaG93RlBTXCIgZXF1YWxzIHRydWUsIG90aGVyd2lzZSBpdCB3aWxsIGJlIGhpZGUuXHJcblxyXG4gICAgXCJmcmFtZVJhdGVcIiAgICAgOiA2MCxcclxuICAgIC8vIFwiZnJhbWVSYXRlXCIgc2V0IHRoZSB3YW50ZWQgZnJhbWUgcmF0ZSBmb3IgeW91ciBnYW1lLCBidXQgdGhlIHJlYWwgZnBzIGRlcGVuZHMgb24geW91ciBnYW1lIGltcGxlbWVudGF0aW9uIGFuZCB0aGUgcnVubmluZyBlbnZpcm9ubWVudC5cclxuXHJcbiAgICBcIm5vQ2FjaGVcIiAgICAgICA6IGZhbHNlLFxyXG4gICAgLy8gXCJub0NhY2hlXCIgc2V0IHdoZXRoZXIgeW91ciByZXNvdXJjZXMgd2lsbCBiZSBsb2FkZWQgd2l0aCBhIHRpbWVzdGFtcCBzdWZmaXggaW4gdGhlIHVybC5cclxuICAgIC8vIEluIHRoaXMgd2F5LCB5b3VyIHJlc291cmNlcyB3aWxsIGJlIGZvcmNlIHVwZGF0ZWQgZXZlbiBpZiB0aGUgYnJvd3NlciBob2xkcyBhIGNhY2hlIG9mIGl0LlxyXG4gICAgLy8gSXQncyB2ZXJ5IHVzZWZ1bCBmb3IgbW9iaWxlIGJyb3dzZXIgZGVidWdpbmcuXHJcblxyXG4gICAgXCJpZFwiICAgICAgICAgICAgOiBcImdhbWVDYW52YXNcIixcclxuICAgIC8vIFwiZ2FtZUNhbnZhc1wiIHNldHMgdGhlIGlkIG9mIHlvdXIgY2FudmFzIGVsZW1lbnQgb24gdGhlIHdlYiBwYWdlLCBpdCdzIHVzZWZ1bCBvbmx5IG9uIHdlYi5cclxuXHJcbiAgICBcInJlbmRlck1vZGVcIiAgICA6IDAsXHJcbiAgICAvLyBcInJlbmRlck1vZGVcIiBzZXRzIHRoZSByZW5kZXJlciB0eXBlLCBvbmx5IHVzZWZ1bCBvbiB3ZWIgOlxyXG4gICAgLy8gICAgICAwIC0gQXV0b21hdGljYWxseSBjaG9zZW4gYnkgZW5naW5lXHJcbiAgICAvLyAgICAgIDEgLSBGb3JjZWQgdG8gdXNlIGNhbnZhcyByZW5kZXJlclxyXG4gICAgLy8gICAgICAyIC0gRm9yY2VkIHRvIHVzZSBXZWJHTCByZW5kZXJlciwgYnV0IHRoaXMgd2lsbCBiZSBpZ25vcmVkIG9uIG1vYmlsZSBicm93c2Vyc1xyXG5cclxuICAgIFwiZW5naW5lRGlyXCIgICAgIDogXCJmcmFtZXdvcmtzL2NvY29zMmQtaHRtbDUvXCIsXHJcbiAgICAvLyBJbiBkZWJ1ZyBtb2RlLCBpZiB5b3UgdXNlIHRoZSB3aG9sZSBlbmdpbmUgdG8gZGV2ZWxvcCB5b3VyIGdhbWUsIHlvdSBzaG91bGQgc3BlY2lmeSBpdHMgcmVsYXRpdmUgcGF0aCB3aXRoIFwiZW5naW5lRGlyXCIsXHJcbiAgICAvLyBidXQgaWYgeW91IGFyZSB1c2luZyBhIHNpbmdsZSBlbmdpbmUgZmlsZSwgeW91IGNhbiBpZ25vcmUgaXQuXHJcblxyXG4gICAgXCJtb2R1bGVzXCIgICAgICAgOiBbXCJjb2NvczJkXCJdLFxyXG4gICAgLy8gXCJtb2R1bGVzXCIgZGVmaW5lcyB3aGljaCBtb2R1bGVzIHlvdSB3aWxsIG5lZWQgaW4geW91ciBnYW1lLCBpdCdzIHVzZWZ1bCBvbmx5IG9uIHdlYixcclxuICAgIC8vIHVzaW5nIHRoaXMgY2FuIGdyZWF0bHkgcmVkdWNlIHlvdXIgZ2FtZSdzIHJlc291cmNlIHNpemUsIGFuZCB0aGUgY29jb3MgY29uc29sZSB0b29sIGNhbiBwYWNrYWdlIHlvdXIgZ2FtZSB3aXRoIG9ubHkgdGhlIG1vZHVsZXMgeW91IHNldC5cclxuICAgIC8vIEZvciBkZXRhaWxzIGFib3V0IG1vZHVsZXMgZGVmaW5pdGlvbnMsIHlvdSBjYW4gcmVmZXIgdG8gXCIuLi8uLi9mcmFtZXdvcmtzL2NvY29zMmQtaHRtbDUvbW9kdWxlc0NvbmZpZy5qc29uXCIuXHJcblxyXG4gICAgXCJqc0xpc3RcIiAgICAgICAgOiBbXHJcbiAgICBdXHJcbiAgICAvLyBcImpzTGlzdFwiIHNldHMgdGhlIGxpc3Qgb2YganMgZmlsZXMgaW4geW91ciBnYW1lLlxyXG4gfVxyXG4gKlxyXG4gKi9cclxuLyplc2xpbnQtZW5hYmxlICovXHJcblxyXG5pbXBvcnQge0FwcEZhY2FkZX0gZnJvbSAnLi9BcHBGYWNhZGUnO1xyXG4vLyBpbXBvcnQge3Jlc0FycmF5fSBmcm9tICcuL3Jlc291cmNlJztcclxuLy8gaW1wb3J0IHtTdGFydFNjZW5lfSBmcm9tICcuL3N0YXJ0U2NlbmUnO1xyXG5cclxuY2MuZ2FtZS5vblJlYWxTdGFydCA9IGZ1bmN0aW9uKCkge1xyXG4gIC8vIElmIHJlZmVyZW5jZWQgbG9hZGluZy5qcywgcGxlYXNlIHJlbW92ZSBpdFxyXG4gIGlmICghY2Muc3lzLmlzTmF0aXZlICYmIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjb2Nvc0xvYWRpbmcnKSkge1xyXG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY29jb3NMb2FkaW5nJykpO1xyXG4gIH1cclxuXHJcbiAgLy8gUGFzcyB0cnVlIHRvIGVuYWJsZSByZXRpbmEgZGlzcGxheSwgb24gQW5kcm9pZCBkaXNhYmxlZCBieSBkZWZhdWx0IHRvIGltcHJvdmUgcGVyZm9ybWFuY2VcclxuICBjYy52aWV3LmVuYWJsZVJldGluYShjYy5zeXMub3MgPT09IGNjLnN5cy5PU19JT1MpO1xyXG5cclxuICAvLyBBZGp1c3Qgdmlld3BvcnQgbWV0YVxyXG4gIGNjLnZpZXcuYWRqdXN0Vmlld1BvcnQodHJ1ZSk7XHJcblxyXG4gIC8vIFVuY29tbWVudCB0aGUgZm9sbG93aW5nIGxpbmUgdG8gc2V0IGEgZml4ZWQgb3JpZW50YXRpb24gZm9yIHlvdXIgZ2FtZVxyXG4gIGNjLnZpZXcuc2V0T3JpZW50YXRpb24oY2MuT1JJRU5UQVRJT05fUE9SVFJBSVQpO1xyXG5cclxuICAvLyBTZXR1cCB0aGUgcmVzb2x1dGlvbiBwb2xpY3kgYW5kIGRlc2lnbiByZXNvbHV0aW9uIHNpemVcclxuICBjYy52aWV3LnNldERlc2lnblJlc29sdXRpb25TaXplKDY0MCwgOTYwLCBjYy5SZXNvbHV0aW9uUG9saWN5LlNIT1dfQUxMKTtcclxuXHJcbiAgLy8gVGhlIGdhbWUgd2lsbCBiZSByZXNpemVkIHdoZW4gYnJvd3NlciBzaXplIGNoYW5nZVxyXG4gIGNjLnZpZXcucmVzaXplV2l0aEJyb3dzZXJTaXplKHRydWUpO1xyXG5cclxuICAvLyBsb2FkIHJlc291cmNlc1xyXG4gIC8vIGNjLkxvYWRlclNjZW5lLnByZWxvYWQocmVzQXJyYXksICgpID0+IHtcclxuICAvLyAgIGNjLmRpcmVjdG9yLnJ1blNjZW5lKG5ldyBTdGFydFNjZW5lKCkpO1xyXG4gIC8vIH0sIHRoaXMpO1xyXG5cclxuICAvLyBpbml0IG12YyBmcmFtZXdvcmtcclxuICBjb25zdCBrZXkgPSAnY29jb3NEZW1vJztcclxuICBBcHBGYWNhZGUuZ2V0SW5zdGFuY2Uoa2V5KS5zdGFydCgpO1xyXG59O1xyXG5cclxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogY2xpZW50L3NyYy9tYWluLmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiOztBQTZEQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBMUZBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXNEQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppFacade = undefined;\n\nvar _puremvc = __webpack_require__(2);\n\nvar _command = __webpack_require__(5);\n\nvar controller = _interopRequireWildcard(_command);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\r\n * Created by leo on 2016/8/1.\r\n */\n\nclass AppFacade extends _puremvc.puremvc.Facade {\n  /** @override */\n  initializeController() {\n    super.initializeController();\n    this.registerCommand(AppFacade.START_APP, controller.StartCommand);\n  }\n\n  /** @override */\n  initializeModel() {\n    super.initializeModel();\n  }\n\n  /** @override */\n  initializeView() {\n    super.initializeView();\n  }\n\n  start() {\n    this.sendNotification(AppFacade.START_APP, {});\n  }\n\n  static getInstance(multitonKey) {\n    const instanceMap = _puremvc.puremvc.Facade.instanceMap;\n    if (!instanceMap[multitonKey]) {\n      instanceMap[multitonKey] = new AppFacade(multitonKey);\n    }\n    return instanceMap[multitonKey];\n  }\n}\n\nexports.AppFacade = AppFacade;\nAppFacade.START_APP = 'StartApp';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9jbGllbnQvc3JjL0FwcEZhY2FkZS5qcz8wZDVhIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGxlbyBvbiAyMDE2LzgvMS5cclxuICovXHJcblxyXG5pbXBvcnQge3B1cmVtdmN9IGZyb20gJ3B1cmVtdmMnO1xyXG5pbXBvcnQgKiBhcyBjb250cm9sbGVyIGZyb20gJy4vY29udHJvbGxlci9jb21tYW5kJztcclxuXHJcbmV4cG9ydCBjbGFzcyBBcHBGYWNhZGUgZXh0ZW5kcyBwdXJlbXZjLkZhY2FkZSB7XHJcbiAgIC8qKiBAb3ZlcnJpZGUgKi9cclxuICBpbml0aWFsaXplQ29udHJvbGxlcigpIHtcclxuICAgIHN1cGVyLmluaXRpYWxpemVDb250cm9sbGVyKCk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyQ29tbWFuZChBcHBGYWNhZGUuU1RBUlRfQVBQLCBjb250cm9sbGVyLlN0YXJ0Q29tbWFuZCk7XHJcbiAgfVxyXG5cclxuICAvKiogQG92ZXJyaWRlICovXHJcbiAgaW5pdGlhbGl6ZU1vZGVsKCkge1xyXG4gICAgc3VwZXIuaW5pdGlhbGl6ZU1vZGVsKCk7XHJcbiAgfVxyXG5cclxuICAvKiogQG92ZXJyaWRlICovXHJcbiAgaW5pdGlhbGl6ZVZpZXcoKSB7XHJcbiAgICBzdXBlci5pbml0aWFsaXplVmlldygpO1xyXG4gIH1cclxuXHJcbiAgc3RhcnQoKSB7XHJcbiAgICB0aGlzLnNlbmROb3RpZmljYXRpb24oQXBwRmFjYWRlLlNUQVJUX0FQUCwge30pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldEluc3RhbmNlKG11bHRpdG9uS2V5KSB7XHJcbiAgICBjb25zdCBpbnN0YW5jZU1hcCA9IHB1cmVtdmMuRmFjYWRlLmluc3RhbmNlTWFwO1xyXG4gICAgaWYgKCFpbnN0YW5jZU1hcFttdWx0aXRvbktleV0pIHtcclxuICAgICAgaW5zdGFuY2VNYXBbbXVsdGl0b25LZXldID0gbmV3IEFwcEZhY2FkZShtdWx0aXRvbktleSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5zdGFuY2VNYXBbbXVsdGl0b25LZXldO1xyXG4gIH1cclxufVxyXG5cclxuQXBwRmFjYWRlLlNUQVJUX0FQUCA9ICdTdGFydEFwcCc7XHJcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGNsaWVudC9zcmMvQXBwRmFjYWRlLmpzXG4gKiovIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFEQTtBQUNBOzs7QUFOQTs7OztBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBM0JBO0FBQ0E7QUFEQTtBQThCQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("exports.puremvc = __webpack_require__(3);\nexports.puremvc.statemachine = __webpack_require__(4);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL34vcHVyZW12Yy9pbmRleC5qcz8zNTk0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydHMucHVyZW12YyA9IHJlcXVpcmUoXCIuL2xpYi9wdXJlbXZjLTEuMC4xLW1vZC5qc1wiKTtcbmV4cG9ydHMucHVyZW12Yy5zdGF0ZW1hY2hpbmUgPSByZXF1aXJlKFwiLi9saWIvcHVyZW12Yy1zdGF0ZW1hY2hpbmUtMS4wLW1vZC5qc1wiKTtcblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9wdXJlbXZjL2luZGV4LmpzXG4gKiogbW9kdWxlIGlkID0gMlxuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("/**\n * @fileOverview\n * PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * Reuse governed by Creative Commons Attribution 3.0 \n * http://creativecommons.org/licenses/by/3.0/us/\n * @author david.foley@puremvc.org \n */\n\n\n \t/* implementation begin */\n\t\n\t\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.Observer\n * \n * A base Observer implementation.\n * \n * An Observer is an object that encapsulates information\n * about an interested object with a method that should \n * be called when a particular Notification is broadcast. \n * \n * In PureMVC, the Observer class assumes these responsibilities:\n * \n * - Encapsulate the notification (callback) method of the interested object.\n * - Encapsulate the notification context (this) of the interested object.\n * - Provide methods for setting the notification method and context.\n * - Provide a method for notifying the interested object.\n * \n * \n * The notification method on the interested object should take \n * one parameter of type Notification.\n * \n * \n * @param {Function} notifyMethod \n *  the notification method of the interested object\n * @param {Object} notifyContext \n *  the notification context of the interested object\n * @constructor\n */\nfunction Observer (notifyMethod, notifyContext)\n{\n    this.setNotifyMethod(notifyMethod);\n    this.setNotifyContext(notifyContext);\n};\n\n/**\n * Set the Observers notification method.\n * \n * The notification method should take one parameter of type Notification\n * @param {Function} notifyMethod\n *  the notification (callback) method of the interested object.\n * @return {void}\n */\nObserver.prototype.setNotifyMethod= function (notifyMethod)\n{\n    this.notify= notifyMethod;\n};\n\n/**\n * Set the Observers notification context.\n * \n * @param {Object} notifyContext\n *  the notification context (this) of the interested object.\n * \n * @return {void}\n */\nObserver.prototype.setNotifyContext= function (notifyContext)\n{\n    this.context= notifyContext;\n};\n\n/**\n * Get the Function that this Observer will invoke when it is notified.\n * \n * @private\n * @return {Function}\n */\nObserver.prototype.getNotifyMethod= function ()\n{\n    return this.notify;\n};\n\n/**\n * Get the Object that will serve as the Observers callback execution context\n * \n * @private\n * @return {Object}\n */\nObserver.prototype.getNotifyContext= function ()\n{\n    return this.context;\n};\n\n/**\n * Notify the interested object.\n * \n * @param {puremvc.Notification} notification\n *  The Notification to pass to the interested objects notification method\n * @return {void}\n */\nObserver.prototype.notifyObserver= function (notification)\n{\n    this.getNotifyMethod().call(this.getNotifyContext(), notification);\n};\n\n/**\n * Compare an object to this Observers notification context.\n * \n * @param {Object} object\n *  \n * @return {boolean}\n */\nObserver.prototype.compareNotifyContext= function (object)\n{\n    return object === this.context;\n};\n\n/**\n * The Observers callback Function\n * \n * @private\n * @type {Function}\n */\nObserver.prototype.notify= null;\n\n/**\n * The Observers callback Object\n * @private\n * @type {Object}\n */\nObserver.prototype.context= null;\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.Notification\n * \n * A base Notification implementation.\n * \n * PureMVC does not rely upon underlying event models such as the one provided \n * with the DOM or other browser centric W3C event models.\n * \n * The Observer Pattern as implemented within PureMVC exists to support \n * event-driven communication between the application and the actors of the MVC \n * triad.\n * \n * Notifications are not meant to be a replacement for events in the browser. \n * Generally, Mediator implementors place event listeners on their view \n * components, which they then handle in the usual way. This may lead to the \n * broadcast of Notifications to trigger commands or to communicate with other \n * Mediators. {@link puremvc.Proxy Proxy},\n * {@link puremvc.SimpleCommand SimpleCommand}\n * and {@link puremvc.MacroCommand MacroCommand}\n * instances communicate with each other and \n * {@link puremvc.Mediator Mediator}s\n * by broadcasting Notifications.\n * \n * A key difference between browser events and PureMVC Notifications is that\n * events follow the 'Chain of Responsibility' pattern, 'bubbling' up the \n * display hierarchy until some parent component handles the event, while \n * PureMVC Notification follow a 'Publish/Subscribe' pattern. PureMVC classes \n * need not be related to each other in a parent/child relationship in order to \n * communicate with one another using Notifications.\n * \n * @constructor \n * @param {string} name\n *  The Notification name\n * @param {Object} [body]\n *  The Notification body\n * @param {Object} [type]\n *  The Notification type\n */\nfunction Notification(name, body, type)\n{\n    this.name= name;\n    this.body= body;\n    this.type= type;\n};\n\n/**\n * Get the name of the Notification instance\n *\n * @return {string}\n *  The name of the Notification instance\n */\nNotification.prototype.getName= function()\n{\n    return this.name;\n};\n\n/**\n * Set this Notifications body. \n * @param {Object} body\n * @return {void}\n */\nNotification.prototype.setBody= function(body)\n{\n    this.body= body;\n};\n\n/**\n * Get the Notification body.\n *\n * @return {Object}\n */\nNotification.prototype.getBody= function()\n{\n    return this.body\n};\n\n/**\n * Set the type of the Notification instance.\n *\n * @param {Object} type\n * @return {void}\n */\nNotification.prototype.setType= function(type)\n{\n    this.type= type;\n};\n\n/**\n * Get the type of the Notification instance.\n * \n * @return {Object}\n */\nNotification.prototype.getType= function()\n{\n    return this.type;\n};\n\n/**\n * Get a string representation of the Notification instance\n *\n * @return {string}\n */\nNotification.prototype.toString= function()\n{\n    var msg= \"Notification Name: \" + this.getName();\n    msg+= \"\\nBody:\" + ((this.body == null ) ? \"null\" : this.body.toString());\n    msg+= \"\\nType:\" + ((this.type == null ) ? \"null\" : this.type);\n    return msg;\n};\n\n/**\n * The Notifications name.\n *\n * @type {string}\n * @private\n */\nNotification.prototype.name= null;\n\n/**\n * The Notifications type.\n *\n * @type {string}\n * @private\n */\nNotification.prototype.type= null;\n\n/**\n * The Notifications body.\n *\n * @type {Object}\n * @private\n */\nNotification.prototype.body= null;\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.Notifier\n * \n * A Base Notifier implementation.\n * \n * {@link puremvc.MacroCommand MacroCommand}, \n * {@link puremvc.SimpleCommand SimpleCommand}, \n * {@link puremvc.Mediator Mediator} and \n * {@link puremvc.Proxy Proxy}\n * all have a need to send Notifications\n * \n * The Notifier interface provides a common method called #sendNotification that \n * relieves implementation code of the necessity to actually construct \n * Notifications.\n * \n * The Notifier class, which all of the above mentioned classes\n * extend, provides an initialized reference to the \n * {@link puremvc.Facade Facade}\n * Multiton, which is required for the convienience method\n * for sending Notifications but also eases implementation as these\n * classes have frequent \n * {@link puremvc.Facade Facade} interactions \n * and usually require access to the facade anyway.\n * \n * NOTE: In the MultiCore version of the framework, there is one caveat to\n * notifiers, they cannot send notifications or reach the facade until they\n * have a valid multitonKey. \n * \n * The multitonKey is set:\n *   - on a Command when it is executed by the Controller\n *   - on a Mediator is registered with the View\n *   - on a Proxy is registered with the Model. \n * \n * @constructor\n */\nfunction Notifier()\n{\n};\n\n/**\n * Create and send a Notification.\n *\n * Keeps us from having to construct new Notification instances in our \n * implementation code.\n * \n * @param {string} notificationName\n *  A notification name\n * @param {Object} [body]\n *  The body of the notification\n * @param {string} [type]\n *  The notification type\n * @return {void}\n */\nNotifier.prototype.sendNotification = function(notificationName, body, type)\n{\n    var facade = this.getFacade();\n    if(facade)\n    {\n        facade.sendNotification(notificationName, body, type);\n    }\n};\n\n\n/**\n * @protected\n * A reference to this Notifier's Facade. This reference will not be available\n * until #initializeNotifier has been called. \n * \n * @type {puremvc.Facade}\n */\nNotifier.prototype.facade;\n\n/**\n * Initialize this Notifier instance.\n * \n * This is how a Notifier gets its multitonKey. \n * Calls to #sendNotification or to access the\n * facade will fail until after this method \n * has been called.\n * \n * Mediators, Commands or Proxies may override \n * this method in order to send notifications\n * or access the Multiton Facade instance as\n * soon as possible. They CANNOT access the facade\n * in their constructors, since this method will not\n * yet have been called.\n * \n *\n * @param {string} key\n *  The Notifiers multiton key;\n * @return {void}\n */\nNotifier.prototype.initializeNotifier = function(key)\n{\n    this.multitonKey = String(key);\n    this.facade= this.getFacade();\n};\n\n/**\n * Retrieve the Multiton Facade instance\n *\n *\n * @protected\n * @return {puremvc.Facade}\n */\nNotifier.prototype.getFacade = function()\n{\n    if(this.multitonKey == null)\n    {\n        throw new Error(Notifier.MULTITON_MSG);\n    };\n\n    return Facade.getInstance(this.multitonKey);\n};\n\n/**\n * @ignore\n * The Notifiers internal multiton key.\n *\n * @protected\n * @type string\n */\nNotifier.prototype.multitonKey = null;\n\n/**\n * @ignore\n * The error message used if the Notifier is not initialized correctly and\n * attempts to retrieve its own multiton key\n *\n * @static\n * @protected\n * @const\n * @type string\n */\nNotifier.MULTITON_MSG = \"multitonKey for this Notifier not yet initialized!\";\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.SimpleCommand\n * @extends puremvc.Notifier\n *\n * SimpleCommands encapsulate the business logic of your application. Your \n * subclass should override the #execute method where your business logic will\n * handle the \n * {@link puremvc.Notification Notification}\n * \n * Take a look at \n * {@link puremvc.Facade#registerCommand Facade's registerCommand}\n * or {@link puremvc.Controller#registerCommand Controllers registerCommand}\n * methods to see how to add commands to your application.\n * \n * @constructor\n */\nfunction SimpleCommand () { };\n\nSimpleCommand.prototype= new Notifier;\nSimpleCommand.prototype.constructor= SimpleCommand;\n\n/**\n * Fulfill the use-case initiated by the given Notification\n * \n * In the Command Pattern, an application use-case typically begins with some\n * user action, which results in a Notification is handled by the business logic\n * in the #execute method of a command.\n * \n * @param {puremvc.Notification} notification\n *  The notification to handle.\n * @return {void}\n */\nSimpleCommand.prototype.execute= function (notification) { };\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.MacroCommand\n * @extends puremvc.Notifier\n * \n * A base command implementation that executes other commands, such as\n * {@link puremvc.SimpleCommand SimpleCommand}\n * or {@link puremvc.MacroCommand MacroCommand}\n * subclasses.\n *  \n * A MacroCommand maintains an list of\n * command constructor references called *SubCommands*.\n * \n * When #execute is called, the MacroCommand\n * instantiates and calls #execute on each of its *SubCommands* in turn.\n * Each *SubCommand* will be passed a reference to the original\n * {@link puremvc.Notification Notification} \n * that was passed to the MacroCommands #execute method\n * \n * Unlike {@link puremvc.SimpleCommand SimpleCommand}, \n * your subclass should not override #execute but instead, should \n * override the #initializeMacroCommand method, calling #addSubCommand once for \n * each *SubCommand* to be executed.\n * \n * If your subclass does define a constructor, be sure to call \"super\" like so\n * \n *     function MyMacroCommand ()\n *     {\n *         MacroCommand.call(this);\n *     };\n * @constructor\n */\nfunction MacroCommand()\n{\n    this.subCommands= [];\n    this.initializeMacroCommand();\n};\n\n/* subclass Notifier */\nMacroCommand.prototype= new Notifier;\nMacroCommand.prototype.constructor= MacroCommand;\n\n/**\n * @private\n * @type {Array.<puremvc.SimpleCommand|puremvc.MacroCommand>}\n */\nMacroCommand.prototype.subCommands= null;\n\n/**\n * @protected\n * Initialize the MacroCommand.\n * \n * In your subclass, override this method to \n * initialize the MacroCommand's *SubCommand*  \n * list with command class references like \n * this:\n * \n *     // Initialize MyMacroCommand\n *     MyMacroCommand.prototype.initializeMacroCommand= function ()\n *     {\n *         this.addSubCommand( com.me.myapp.controller.FirstCommand );\n *         this.addSubCommand( com.me.myapp.controller.SecondCommand );\n *         this.addSubCommand( com.me.myapp.controller.ThirdCommand );\n *     };\n * \n * Note that *SubCommand*s may be any command implementor,\n * MacroCommands or SimpleCommands are both acceptable.\n * @return {void}\n */\nMacroCommand.prototype.initializeMacroCommand= function() {}\n\n/**\n * @protected\n * Add a *SubCommand*\n * \n * The *SubCommand*s will be called in First In / First Out (FIFO) order\n * @param {Function} commandClassRef\n *  A reference to a subclassed SimpleCommand or MacroCommand constructor\n */\nMacroCommand.prototype.addSubCommand= function(commandClassRef)\n{\n    this.subCommands.push(commandClassRef);\n};\n\n/**\n * Execute this MacroCommands *SubCommands*\n * \n * The *SubCommand*s will be called in First In / First Out (FIFO) order\n * @param {puremvc.Notification} note\n *  The Notification object to be passed to each *SubCommand*\n */\nMacroCommand.prototype.execute= function(note)\n{\n    // SIC- TODO optimize\n    while(this.subCommands.length > 0)\n    {\n        var ref= this.subCommands.shift();\n        var cmd= new ref;\n        cmd.initializeNotifier(this.multitonKey);\n        cmd.execute(note);\n    }\n};\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.Mediator\n * @extends puremvc.Notifier\n * \n * A base Mediator implementation.\n *\n * In PureMVC, Mediator classes are used to mediate communication between a view \n * component and the rest of the application.\n *\n * A Mediator should listen to its view components for events, and handle them \n * by sending notifications (to be handled by other Mediators, \n * {@link puremvc.SimpleCommand SimpleCommands} \n * or\n * {@link puremvc.MacroCommand MacroCommands}) \n * or passing data from the view component directly to a \n * {@link puremvc.Proxy Proxy}, such as submitting \n * the contents of a form to a service.\n * \n * Mediators should not perform business logic, maintain state or other \n * information for its view component, or break the encapsulation of the view \n * component by manipulating the view component's children. It should only call \n * methods or set properties on the view component.\n *  \n * The view component should encapsulate its own behavior and implementation by \n * exposing methods and properties that the Mediator can call without having to \n * know about the view component's children.\n * \n * @constructor\n * @param {string} [mediatorName]\n *  The Mediators name. The Mediators static #NAME value is used by default\n * @param {Object} [viewComponent]\n *  The Mediators {@link #setViewComponent viewComponent}.\n */\nfunction Mediator (mediatorName, viewComponent)\n{\n    this.mediatorName= mediatorName || this.constructor.NAME;\n    this.viewComponent=viewComponent;  \n};\n\n/**\n * @static\n * The name of the Mediator.\n * \n * Typically, a Mediator will be written to serve one specific control or group\n * of controls and so, will not have a need to be dynamically named.\n * \n * @type {string}\n */\nMediator.NAME= \"Mediator\";\n\n/* subclass */\nMediator.prototype= new Notifier;\nMediator.prototype.constructor= Mediator;\n\n/**\n * Get the name of the Mediator\n * \n * @return {string}\n *  The Mediator name\n */\nMediator.prototype.getMediatorName= function ()\n{\n    return this.mediatorName;\n};\n\n/**\n * Set the Mediators view component. This could\n * be a HTMLElement, a bespoke UiComponent wrapper\n * class, a MooTools Element, a jQuery result or a\n * css selector, depending on which DOM abstraction \n * library you are using.\n * \n * \n * @param {Object} the view component\n * @return {void}\n */\nMediator.prototype.setViewComponent= function (viewComponent)\n{\n    this.viewComponent= viewComponent;\n};\n\n/**\n * Get the Mediators view component.\n * \n * Additionally, an optional explicit getter can be\n * be defined in the subclass that defines the \n * view components, providing a more semantic interface\n * to the Mediator.\n * \n * This is different from the AS3 implementation in\n * the sense that no casting is required from the\n * object supplied as the view component.\n * \n *     MyMediator.prototype.getComboBox= function ()\n *     {\n *         return this.viewComponent;  \n *     }\n * \n * @return {Object}\n *  The view component\n */\nMediator.prototype.getViewComponent= function ()\n{\n    return this.viewComponent;\n};\n\n/**\n * List the Notification names this Mediator is interested\n * in being notified of.\n * \n * @return {Array} \n *  The list of Notification names.\n */\nMediator.prototype.listNotificationInterests= function ()\n{\n    return [];\n};\n\n/**\n * Handle Notifications.\n * \n * Typically this will be handled in a switch statement\n * with one 'case' entry per Notification the Mediator\n * is interested in\n * \n * @param {puremvc.Notification} notification\n * @return {void}\n */\nMediator.prototype.handleNotification= function (notification)\n{\n    return;\n};\n\n/**\n * Called by the View when the Mediator is registered\n * @return {void}\n */\nMediator.prototype.onRegister= function ()\n{\n    return;\n};\n\n/**\n * Called by the View when the Mediator is removed\n */\nMediator.prototype.onRemove= function ()\n{\n    return;\n};\n\n/**\n * @ignore\n * The Mediators name. Should only be accessed by Mediator subclasses.\n * \n * @protected\n * @type string\n */\nMediator.prototype.mediatorName= null;\n\n/**\n * @ignore\n * The Mediators viewComponent. Should only be accessed by Mediator subclasses.\n * \n * @protected\n * @type Object\n */\nMediator.prototype.viewComponent=null;\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.Proxy\n * @extends puremvc.Notifier\n *\n * A base Proxy implementation. \n * \n * In PureMVC, Proxy classes are used to manage parts of the application's data \n * model.\n * \n * A Proxy might simply manage a reference to a local data object, in which case \n * interacting with it might involve setting and getting of its data in \n * synchronous fashion.\n * \n * Proxy classes are also used to encapsulate the application's interaction with \n * remote services to save or retrieve data, in which case, we adopt an \n * asyncronous idiom; setting data (or calling a method) on the Proxy and \n * listening for a \n * {@link puremvc.Notification Notification} \n * to be sent  when the Proxy has retrieved the data from the service. \n * \n * \n * @param {string} [proxyName]\n *  The Proxy's name. If none is provided, the Proxy will use its constructors\n *  NAME property.\n * @param {Object} [data]\n *  The Proxy's data object\n * @constructor\n */\nfunction Proxy(proxyName, data)\n{\n    this.proxyName= proxyName || this.constructor.NAME;\n    if(data != null)\n    {\n        this.setData(data);\n    }\n};\n\n\nProxy.NAME= \"Proxy\";\n\nProxy.prototype= new Notifier;\nProxy.prototype.constructor= Proxy;\n\n/**\n * Get the Proxy's name.\n *\n * @return {string}\n */\nProxy.prototype.getProxyName= function()\n{\n    return this.proxyName;\n};\n\n/**\n * Set the Proxy's data object\n *\n * @param {Object} data\n * @return {void}\n */\nProxy.prototype.setData= function(data)\n{\n    this.data= data;\n};\n\n/**\n * Get the Proxy's data object\n *\n * @return {Object}\n */\nProxy.prototype.getData= function()\n{\n    return this.data;\n};\n\n/**\n * Called by the {@link puremvc.Model Model} when\n * the Proxy is registered.\n *\n * @return {void}\n */\nProxy.prototype.onRegister= function()\n{\n    return;\n};\n\n/**\n * Called by the {@link puremvc.Model Model} when\n * the Proxy is removed.\n * \n * @return {void}\n */\nProxy.prototype.onRemove= function()\n{\n    return;\n};\n\n/**\n * @ignore\n * The Proxys name.\n *\n * @protected\n * @type String\n */\nProxy.prototype.proxyName= null;\n\n/**\n * @ignore\n * The Proxy's data object.\n *\n * @protected\n * @type Object\n */\nProxy.prototype.data= null;\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.Facade\n * Facade exposes the functionality of the Controller, Model and View\n * actors to client facing code. \n * \n * This Facade implementation is a Multiton, so you should not call the \n * constructor directly, but instead call the static Factory method, \n * passing the unique key for this instance to #getInstance\n *\n * @constructor\n * @param {string} key\n * \tThe multiton key to use to retrieve the Facade instance.\n * @throws {Error} \n *  If an attempt is made to instantiate Facade directly\n */\nfunction Facade(key)\n{\n    if(Facade.instanceMap[key] != null)\n    {\n        throw new Error(Facade.MULTITON_MSG);\n    }\n\n    this.initializeNotifier(key);\n    Facade.instanceMap[key] = this;\n    this.initializeFacade();\n};\n\n/**\n * Initialize the Multiton Facade instance.\n * \n * Called automatically by the constructor. Override in your subclass to any\n * subclass specific initializations. Be sure to call the 'super' \n * initializeFacade method, though\n * \n *     MyFacade.prototype.initializeFacade= function ()\n *     {\n *         Facade.call(this);\n *     };\n * @protected\n * @return {void}\n */\nFacade.prototype.initializeFacade = function()\n{\n    this.initializeModel();\n    this.initializeController();\n    this.initializeView();\n};\n\n/**\n * Facade Multiton Factory method. \n * Note that this method will return null if supplied a\n * null or undefined multiton key.\n * \n * @param {string} key\n * \tThe multiton key use to retrieve a particular Facade instance\n * @return {puremvc.Facade}\n */\nFacade.getInstance = function(key)\n{\n\tif (null == key)\n\t\treturn null;\n\t\t\n    if(Facade.instanceMap[key] == null)\n    {\n        Facade.instanceMap[key] = new Facade(key);\n    }\n\n    return Facade.instanceMap[key];\n};\n\n/**\n * Initialize the {@link puremvc.Controller Controller}.\n * \n * Called by the #initializeFacade method.\n * \n * Override this method in your subclass of Facade\n * if one or both of the following are true:\n\n * - You wish to initialize a different Controller\n * - You have \n * {@link puremvc.SimpleCommand SimpleCommand}s\n * or {@link puremvc.MacroCommand MacroCommand}s\n * to register with the Controllerat startup.   \n * \n * If you don't want to initialize a different Controller, \n * call the 'super' initializeControlle method at the beginning of your\n * method, then register commands.\n * \n *     MyFacade.prototype.initializeController= function ()\n *     {\n *         Facade.prototype.initializeController.call(this);\n *         this.registerCommand(AppConstants.A_NOTE_NAME, ABespokeCommand)\n *     }\n * \n * @protected\n * @return {void}\n */\nFacade.prototype.initializeController = function()\n{\n    if(this.controller != null)\n        return;\n\n    this.controller = Controller.getInstance(this.multitonKey);\n};\n\n/**\n * @protected\n * Initialize the {@link puremvc.Model Model};\n * \n * Called by the #initializeFacade method.\n * Override this method in your subclass of Facade if one of the following are\n * true:\n * \n * - You wish to initialize a different Model.\n * \n * - You have {@link puremvc.Proxy Proxy}s to \n *   register with the Model that do not retrieve a reference to the Facade at \n *   construction time.\n * \n * If you don't want to initialize a different Model\n * call 'super' #initializeModel at the beginning of your method, then register \n * Proxys.\n * \n * Note: This method is *rarely* overridden; in practice you are more\n * likely to use a command to create and registerProxys with the Model>, \n * since Proxys with mutable data will likely\n * need to send Notifications and thus will likely want to fetch a reference to \n * the Facade during their construction. \n * \n * @return {void}\n */\nFacade.prototype.initializeModel = function()\n{\n    if(this.model != null)\n        return;\n\n    this.model = Model.getInstance(this.multitonKey);\n};\n\n/**\n * @protected\n * \n * Initialize the {@link puremvc.View View}.\n * \n * Called by the #initializeFacade method.\n * \n * Override this method in your subclass of Facade if one or both of the \n * following are true:\n *\n * - You wish to initialize a different View.\n * - You have Observers to register with the View\n * \n * If you don't want to initialize a different View \n * call 'super' #initializeView at the beginning of your\n * method, then register Mediator instances.\n * \n *     MyFacade.prototype.initializeView= function ()\n *     {\n *         Facade.prototype.initializeView.call(this);\n *         this.registerMediator(new MyMediator());\n *     };\n * \n * Note: This method is *rarely* overridden; in practice you are more\n * likely to use a command to create and register Mediators\n * with the View, since Mediator instances will need to send \n * Notifications and thus will likely want to fetch a reference \n * to the Facade during their construction. \n * @return {void}\n */\nFacade.prototype.initializeView = function()\n{\n    if(this.view != null)\n        return;\n\n    this.view = View.getInstance(this.multitonKey);\n};\n\n/**\n * Register a command with the Controller by Notification name\n * @param {string} notificationName\n *  The name of the Notification to associate the command with\n * @param {Function} commandClassRef\n *  A reference ot the commands constructor.\n * @return {void}\n */\nFacade.prototype.registerCommand = function(notificationName, commandClassRef)\n{\n    this.controller.registerCommand(notificationName, commandClassRef);\n};\n\n/**\n * Remove a previously registered command to Notification mapping from the\n * {@link puremvc.Controller#removeCommand Controller}\n * @param {string} notificationName\n *  The name of the the Notification to remove from the command mapping for.\n * @return {void}\n */\nFacade.prototype.removeCommand = function(notificationName)\n{\n    this.controller.removeCommand(notificationName);\n};\n\n/**\n * Check if a command is registered for a given notification.\n * \n * @param {string} notificationName\n *  A Notification name\n * @return {boolean}\n *  Whether a comman is currently registered for the given notificationName\n */\nFacade.prototype.hasCommand = function(notificationName)\n{\n    return this.controller.hasCommand(notificationName);\n};\n\n/**\n * Register a Proxy with the {@link puremvc.Model#registerProxy Model}\n * by name.\n * \n * @param {puremvc.Proxy} proxy\n *  The Proxy instance to be registered with the Model.\n * @return {void}\n */\nFacade.prototype.registerProxy = function(proxy)\n{\n    this.model.registerProxy(proxy);\n};\n\n/**\n * Retrieve a Proxy from the Model\n * \n * @param {string} proxyName\n * @return {puremvc.Proxy}\n */\nFacade.prototype.retrieveProxy = function(proxyName)\n{\n    return this.model.retrieveProxy(proxyName);\n};\n\n/**\n * Remove a Proxy from the Model by name\n * @param {string} proxyName\n *  The name of the Proxy\n * @return {puremvc.Proxy}\n *  The Proxy that was removed from the Model\n */\nFacade.prototype.removeProxy = function(proxyName)\n{\n    var proxy = null;\n    if(this.model != null)\n    {\n        proxy = this.model.removeProxy(proxyName);\n    }\n\n    return proxy;\n};\n\n/**\n * Check it a Proxy is registered.\n * @param {string} proxyName\n *  A Proxy name\n * @return {boolean}\n *  Whether a Proxy is currently registered with the given proxyName\n */\nFacade.prototype.hasProxy = function(proxyName)\n{\n    return this.model.hasProxy(proxyName);\n};\n\n/**\n * Register a Mediator with with the View.\n * \n * @param {puremvc.Mediator} mediator\n *  A reference to the Mediator to register\n * @return {void}\n */\nFacade.prototype.registerMediator = function(mediator)\n{\n    if(this.view != null)\n    {\n        this.view.registerMediator(mediator);\n    }\n};\n\n/**\n * Retrieve a Mediator from the View by name\n * \n * @param {string} mediatorName\n *  The Mediators name\n * @return {puremvc.Mediator}\n *  The retrieved Mediator\n */\nFacade.prototype.retrieveMediator = function(mediatorName)\n{\n    return this.view.retrieveMediator(mediatorName);\n};\n\n/**\n * Remove a Mediator from the View.\n * \n * @param {string} mediatorName\n *  The name of the Mediator to remove.\n * @return {puremvc.Mediator}\n *  The removed Mediator\n */\nFacade.prototype.removeMediator = function(mediatorName)\n{\n    var mediator = null;\n    if(this.view != null)\n    {\n        mediator = this.view.removeMediator(mediatorName);\n    }\n\n    return mediator;\n};\n\n/**\n * Check if a Mediator is registered or not.\n * \n * @param {string} mediatorName\n *  A Mediator name\n * @return {boolean}\n *  Whether a Mediator is registered with the given mediatorName\n */\nFacade.prototype.hasMediator = function(mediatorName)\n{\n    return this.view.hasMediator(mediatorName);\n};\n\n/**\n * Create and send a \n * {@link puremvc.Notification Notification}\n * \n * Keeps us from having to construct new Notification instances in our\n * implementation\n * \n * @param {string} notificationName\n *  The name of the Notification to send\n * @param {Object} [body]\n *  The body of the notification\n * @param {string} [type]\n *  The type of the notification\n * @return {void}\n */\nFacade.prototype.sendNotification = function(notificationName, body, type)\n{\n    this.notifyObservers(new Notification(notificationName, body, type));\n};\n\n/**\n * Notify {@link puremvc.Observer Observer}s\n * \n * This method is left public mostly for backward compatibility, and to allow\n * you to send custom notification classes using the facade.\n * \n * Usually you should just call sendNotification and pass the parameters, never \n * having to construct the notification yourself.\n * \n * @param {puremvc.Notification} notification\n *  The Notification to send\n * @return {void}\n */\nFacade.prototype.notifyObservers = function(notification)\n{\n    if(this.view != null)\n    {\n        this.view.notifyObservers(notification);\n    }\n};\n\n/**\n * Initialize the Facades Notifier capabilities by setting the Multiton key for \n * this facade instance.\n * \n * Not called directly, but instead from the constructor when #getInstance is \n * invoked. It is necessary to be public in order to implement Notifier\n * \n * @param {string} key\n * @return {void}\n */\nFacade.prototype.initializeNotifier = function(key)\n{\n    this.multitonKey = key;\n};\n\n/**\n * Check if a *Core* is registered or not\n *\n * @static\n * @param {string} key\n *  The multiton key for the *Core* in question\n * @return {boolean}\n *  Whether a *Core* is registered with the given key\n */\nFacade.hasCore = function(key)\n{\n    return Facade.instanceMap[key] != null;\n};\n\n/**\n * Remove a *Core* \n * \n * Remove the Model, View, Controller and Facade for a given key.\n *\n * @static\n * @param {string} key\n * @return {void}\n */\nFacade.removeCore = function(key)\n{\n    if(Facade.instanceMap[key] == null)\n        return;\n\n    Model.removeModel(key);\n    View.removeView(key);\n    Controller.removeController(key);\n    delete Facade.instanceMap[key];\n};\n\n/**\n * @ignore\n * The Facades corresponding Controller\n *\n * @protected\n * @type puremvc.Controller\n */\nFacade.prototype.controller = null;\n\n/**\n * @ignore\n * The Facades corresponding Model instance\n *\n * @protected\n * @type puremvc.Model\n */\nFacade.prototype.model = null;\n\n/**\n * @ignore\n * The Facades correspnding View instance.\n *\n * @protected\n * @type puremvc.View\n */\nFacade.prototype.view = null;\n\n/**\n * @ignore\n * The Facades multiton key.\n *\n * @protected\n * @type string\n */\nFacade.prototype.multitonKey = null;\n\n/**\n * @ignore\n * The Multiton Facade instance map.\n * @static\n * @protected\n * @type Array\n */\nFacade.instanceMap = [];\n\n/**\n * @ignore\n * Message Constants\n * @protected\n * @type {string}\n * @const\n * @static\n */\nFacade.MULTITON_MSG = \"Facade instance for this Multiton key already constructed!\";\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.View\n * \n * A Multiton View implementation.\n * \n * In PureMVC, the View class assumes these responsibilities\n * \n * - Maintain a cache of {@link puremvc.Mediator Mediator}\n *   instances.\n * \n * - Provide methods for registering, retrieving, and removing \n *   {@link puremvc.Mediator Mediator}.\n * \n * - Notifiying {@link puremvc.Mediator Mediator} when they are registered or \n *   removed.\n * \n * - Managing the observer lists for each {@link puremvc.Notification Notification}  \n *   in the application.\n * \n * - Providing a method for attaching {@link puremvc.Observer Observer} to an \n *   {@link puremvc.Notification Notification}'s observer list.\n * \n * - Providing a method for broadcasting a {@link puremvc.Notification Notification}.\n * \n * - Notifying the {@link puremvc.Observer Observer}s of a given \n *   {@link puremvc.Notification Notification} when it broadcast.\n * \n * This View implementation is a Multiton, so you should not call the \n * constructor directly, but instead call the static Multiton \n * Factory #getInstance method.\n * \n * @param {string} key\n * @constructor\n * @throws {Error} \n *  if instance for this Multiton key has already been constructed\n */\nfunction View(key)\n{\n    if(View.instanceMap[key] != null)\n    {\n        throw new Error(View.MULTITON_MSG);\n    };\n\n    this.multitonKey = key;\n    View.instanceMap[this.multitonKey] = this;\n    this.mediatorMap = [];\n    this.observerMap = [];\n    this.initializeView();\n};\n\n/**\n * @protected\n * Initialize the Singleton View instance\n * \n * Called automatically by the constructor, this is your opportunity to\n * initialize the Singleton instance in your subclass without overriding the\n * constructor\n * \n * @return {void}\n */\nView.prototype.initializeView = function()\n{\n    return;\n};\n\n/**\n * View Singleton Factory method.\n * Note that this method will return null if supplied a null \n * or undefined multiton key.\n *  \n * @return {puremvc.View}\n *  The Singleton instance of View\n */\nView.getInstance = function(key)\n{\n\tif (null == key)\n\t\treturn null;\n\t\t\n    if(View.instanceMap[key] == null)\n    {\n        View.instanceMap[key] = new View(key);\n    };\n\n    return View.instanceMap[key];\n};\n\n/**\n * Register an Observer to be notified of Notifications with a given name\n * \n * @param {string} notificationName\n *  The name of the Notifications to notify this Observer of\n * @param {puremvc.Observer} observer\n *  The Observer to register.\n * @return {void}\n */\nView.prototype.registerObserver = function(notificationName, observer)\n{\n    if(this.observerMap[notificationName] != null)\n    {\n        this.observerMap[notificationName].push(observer);\n    }\n    else\n    {\n        this.observerMap[notificationName] = [observer];\n    }\n};\n\n/**\n * Notify the Observersfor a particular Notification.\n * \n * All previously attached Observers for this Notification's\n * list are notified and are passed a reference to the INotification in \n * the order in which they were registered.\n * \n * @param {puremvc.Notification} notification\n *  The Notification to notify Observers of\n * @return {void}\n */\nView.prototype.notifyObservers = function(notification)\n{\n    // SIC\n    if(this.observerMap[notification.getName()] != null)\n    {\n        var observers_ref = this.observerMap[notification.getName()], observers = [], observer\n\n        for(var i = 0; i < observers_ref.length; i++)\n        {\n            observer = observers_ref[i];\n            observers.push(observer);\n        }\n\n        for(var i = 0; i < observers.length; i++)\n        {\n            observer = observers[i];\n            observer.notifyObserver(notification);\n        }\n    }\n};\n\n/**\n * Remove the Observer for a given notifyContext from an observer list for\n * a given Notification name\n * \n * @param {string} notificationName\n *  Which observer list to remove from\n * @param {Object} notifyContext\n *  Remove the Observer with this object as its notifyContext\n * @return {void}\n */\nView.prototype.removeObserver = function(notificationName, notifyContext)\n{\n    // SIC\n    var observers = this.observerMap[notificationName];\n    for(var i = 0; i < observers.length; i++)\n    {\n        if(observers[i].compareNotifyContext(notifyContext) == true)\n        {\n            observers.splice(i, 1);\n            break;\n        }\n    }\n\n    if(observers.length == 0)\n    {\n        delete this.observerMap[notificationName];\n    }\n};\n\n/**\n * Register a Mediator instance with the View.\n * \n * Registers the Mediator so that it can be retrieved by name,\n * and further interrogates the Mediator for its \n * {@link puremvc.Mediator#listNotificationInterests interests}.\n *\n * If the Mediator returns any Notification\n * names to be notified about, an Observer is created encapsulating \n * the Mediator instance's \n * {@link puremvc.Mediator#handleNotification handleNotification}\n * method and registering it as an Observer for all Notifications the \n * Mediator is interested in.\n * \n * @param {puremvc.Mediator} \n *  a reference to the Mediator instance\n */\nView.prototype.registerMediator = function(mediator)\n{\n    if(this.mediatorMap[mediator.getMediatorName()] != null)\n    {\n        return;\n    }\n\n    mediator.initializeNotifier(this.multitonKey);\n    // register the mediator for retrieval by name\n    this.mediatorMap[mediator.getMediatorName()] = mediator;\n\n    // get notification interests if any\n    var interests = mediator.listNotificationInterests();\n\n    // register mediator as an observer for each notification\n    if(interests.length > 0)\n    {\n        // create observer referencing this mediators handleNotification method\n        var observer = new Observer(mediator.handleNotification, mediator);\n        for(var i = 0; i < interests.length; i++)\n        {\n            this.registerObserver(interests[i], observer);\n        }\n    }\n\n    mediator.onRegister();\n}\n\n/**\n * Retrieve a Mediator from the View\n * \n * @param {string} mediatorName\n *  The name of the Mediator instance to retrieve\n * @return {puremvc.Mediator}\n *  The Mediator instance previously registered with the given mediatorName\n */\nView.prototype.retrieveMediator = function(mediatorName)\n{\n    return this.mediatorMap[mediatorName];\n};\n\n/**\n * Remove a Mediator from the View.\n * \n * @param {string} mediatorName\n *  Name of the Mediator instance to be removed\n * @return {puremvc.Mediator}\n *  The Mediator that was removed from the View\n */\nView.prototype.removeMediator = function(mediatorName)\n{\n    var mediator = this.mediatorMap[mediatorName];\n    if(mediator)\n    {\n        // for every notification the mediator is interested in...\n        var interests = mediator.listNotificationInterests();\n        for(var i = 0; i < interests.length; i++)\n        {\n            // remove the observer linking the mediator to the notification\n            // interest\n            this.removeObserver(interests[i], mediator);\n        }\n\n        // remove the mediator from the map\n        delete this.mediatorMap[mediatorName];\n\n        // alert the mediator that it has been removed\n        mediator.onRemove();\n    }\n\n    return mediator;\n};\n\n/**\n * Check if a Mediator is registered or not.\n * \n * @param {string} mediatorName\n * @return {boolean}\n *  Whether a Mediator is registered with the given mediatorname\n */\nView.prototype.hasMediator = function(mediatorName)\n{\n    return this.mediatorMap[mediatorName] != null;\n};\n\n/**\n * Remove a View instance\n * \n * @return {void}\n */\nView.removeView = function(key)\n{\n    delete View.instanceMap[key];\n};\n\n/**\n * @ignore\n * The Views internal mapping of mediator names to mediator instances\n *\n * @type Array\n * @protected\n */\nView.prototype.mediatorMap = null;\n\n/**\n * @ignore\n * The Views internal mapping of Notification names to Observer lists\n *\n * @type Array\n * @protected\n */\nView.prototype.observerMap = null;\n\n/**\n * @ignore\n * The internal map used to store multiton View instances\n *\n * @type Array\n * @protected\n */\nView.instanceMap = [];\n\n/**\n * @ignore\n * The Views internal multiton key.\n *\n * @type string\n * @protected\n */\nView.prototype.multitonKey = null;\n\n/**\n * @ignore\n * The error message used if an attempt is made to instantiate View directly\n *\n * @type string\n * @protected\n * @const\n * @static\n */\nView.MULTITON_MSG = \"View instance for this Multiton key already constructed!\";\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.Model\n *\n * A Multiton Model implementation.\n *\n * In PureMVC, the Model class provides\n * access to model objects (Proxies) by named lookup.\n *\n * The Model assumes these responsibilities:\n *\n * - Maintain a cache of {@link puremvc.Proxy Proxy}\n *   instances.\n * - Provide methods for registering, retrieving, and removing\n *   {@link puremvc.Proxy Proxy} instances.\n *\n * Your application must register \n * {@link puremvc.Proxy Proxy} instances with the Model. \n * Typically, you use a \n * {@link puremvc.SimpleCommand SimpleCommand} \n * or\n * {@link puremvc.MacroCommand MacroCommand} \n * to create and register Proxy instances once the Facade has initialized the \n * *Core* actors.\n *\n * This Model implementation is a Multiton, so you should not call the \n * constructor directly, but instead call the \n * {@link #getInstance static Multiton Factory method} \n * @constructor\n * @param {string} key\n *  The Models multiton key\n * @throws {Error}\n *  An error is thrown if this multitons key is already in use by another instance\n */\nfunction Model(key)\n{\n    if(Model.instanceMap[key])\n    {\n        throw new Error(Model.MULTITON_MSG);\n    }\n\n    this.multitonKey= key;\n    Model.instanceMap[key]= this;\n    this.proxyMap= [];\n    this.initializeModel();\n};\n\n/**\n * Initialize the Model instance.\n * \n * Called automatically by the constructor, this\n * is your opportunity to initialize the Singleton\n * instance in your subclass without overriding the\n * constructor.\n * \n * @return void\n */\nModel.prototype.initializeModel= function(){};\n\n\n/**\n * Model Multiton Factory method.\n * Note that this method will return null if supplied a null \n * or undefined multiton key.\n *  \n * @param {string} key\n *  The multiton key for the Model to retrieve\n * @return {puremvc.Model}\n *  the instance for this Multiton key \n */\nModel.getInstance= function(key)\n{\n\tif (null == key)\n\t\treturn null;\n\t\t\n    if(Model.instanceMap[key] == null)\n    {\n        Model.instanceMap[key]= new Model(key);\n    }\n\n    return Model.instanceMap[key];\n};\n\n/**\n * Register a Proxy with the Model\n * @param {puremvc.Proxy}\n */\nModel.prototype.registerProxy= function(proxy)\n{\n    proxy.initializeNotifier(this.multitonKey);\n    this.proxyMap[proxy.getProxyName()]= proxy;\n    proxy.onRegister();\n};\n\n/**\n * Retrieve a Proxy from the Model\n * \n * @param {string} proxyName\n * @return {puremvc.Proxy}\n *  The Proxy instance previously registered with the provided proxyName\n */\nModel.prototype.retrieveProxy= function(proxyName)\n{\n    return this.proxyMap[proxyName];\n};\n\n/**\n * Check if a Proxy is registered\n * @param {string} proxyName\n * @return {boolean}\n *  whether a Proxy is currently registered with the given proxyName.\n */\nModel.prototype.hasProxy= function(proxyName)\n{\n    return this.proxyMap[proxyName] != null;\n};\n\n/**\n * Remove a Proxy from the Model.\n * \n * @param {string} proxyName\n *  The name of the Proxy instance to remove\n * @return {puremvc.Proxy}\n *  The Proxy that was removed from the Model\n */\nModel.prototype.removeProxy= function(proxyName)\n{\n    var proxy= this.proxyMap[proxyName];\n    if(proxy)\n    {\n        this.proxyMap[proxyName]= null;\n        proxy.onRemove();\n    }\n\n    return proxy;\n};\n\n/**\n * @static\n * Remove a Model instance.\n * \n * @param {string} key\n * @return {void}\n */\nModel.removeModel= function(key)\n{\n    delete Model.instanceMap[key];\n};\n\n/**\n * @ignore\n * The map used by the Model to store Proxy instances.\n *\n * @protected\n * @type Array\n */\nModel.prototype.proxyMap= null;\n\n/**\n * @ignore\n * The map used by the Model to store multiton instances\n *\n * @protected\n * @static\n * @type Array\n */\nModel.instanceMap= [];\n\n/**\n * @ignore\n * The Models multiton key.\n *\n * @protected\n * @type string\n */\nModel.prototype.multitonKey;\n\n/**\n * @ignore\n * Message Constants\n * \n * @static\n * @type {string}\n */\nModel.MULTITON_MSG= \"Model instance for this Multiton key already constructed!\";\n/**\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @class puremvc.Controller\n * \n * In PureMVC, the Controller class follows the 'Command and Controller' \n * strategy, and assumes these responsibilities:\n * \n * - Remembering which\n * {@link puremvc.SimpleCommand SimpleCommand}s\n * or \n * {@link puremvc.MacroCommand MacroCommand}s\n * are intended to handle which \n * {@link puremvc.Notification Notification}s\n * - Registering itself as an \n * {@link puremvc.Observer Observer} with\n * the {@link puremvc.View View} for each \n * {@link puremvc.Notification Notification}\n * that it has an \n * {@link puremvc.SimpleCommand SimpleCommand} \n * or {@link puremvc.MacroCommand MacroCommand} \n * mapping for.\n * - Creating a new instance of the proper \n * {@link puremvc.SimpleCommand SimpleCommand}s\n * or \n * {@link puremvc.MacroCommand MacroCommand}s\n * to handle a given \n * {@link puremvc.Notification Notification} \n * when notified by the\n * {@link puremvc.View View}.\n * - Calling the command's execute method, passing in the \n * {@link puremvc.Notification Notification}.\n *\n * Your application must register \n * {@link puremvc.SimpleCommand SimpleCommand}s\n * or {@link puremvc.MacroCommand MacroCommand}s \n * with the Controller.\n *\n * The simplest way is to subclass \n * {@link puremvc.Facade Facade},\n * and use its \n * {@link puremvc.Facade#initializeController initializeController} \n * method to add your registrations.\n *\n * @constructor\n * This Controller implementation is a Multiton, so you should not call the \n * constructor directly, but instead call the static #getInstance factory method, \n * passing the unique key for this instance to it.\n * @param {string} key\n * @throws {Error}\n *  If instance for this Multiton key has already been constructed\n */\nfunction Controller(key)\n{\n    if(Controller.instanceMap[key] != null)\n    {\n        throw new Error(Controller.MULTITON_MSG);\n    }\n\n    this.multitonKey= key;\n    Controller.instanceMap[this.multitonKey]= this;\n    this.commandMap= new Array();\n    this.initializeController();\n}\n\n/**\n * @protected\n * \n * Initialize the multiton Controller instance.\n *\n * Called automatically by the constructor.\n *\n * Note that if you are using a subclass of View\n * in your application, you should *also* subclass Controller\n * and override the initializeController method in the\n * following way.\n * \n *     MyController.prototype.initializeController= function ()\n *     {\n *         this.view= MyView.getInstance(this.multitonKey);\n *     };\n * \n * @return {void}\n */\nController.prototype.initializeController= function()\n{\n    this.view= View.getInstance(this.multitonKey);\n};\n\n/**\n * The Controllers multiton factory method. \n * Note that this method will return null if supplied a null \n * or undefined multiton key. \n *\n * @param {string} key\n *  A Controller's multiton key\n * @return {puremvc.Controller}\n *  the Multiton instance of Controller\n */\nController.getInstance= function(key)\n{\n\tif (null == key)\n\t\treturn null;\n\t\t\n    if(null == this.instanceMap[key])\n    {\n        this.instanceMap[key]= new this(key);\n    }\n\n    return this.instanceMap[key];\n};\n\n/**\n * If a SimpleCommand or MacroCommand has previously been registered to handle\n * the given Notification then it is executed.\n *\n * @param {puremvc.Notification} note\n * @return {void}\n */\nController.prototype.executeCommand= function(note)\n{\n    var commandClassRef= this.commandMap[note.getName()];\n    if(commandClassRef == null)\n        return;\n\n    var commandInstance= new commandClassRef();\n    commandInstance.initializeNotifier(this.multitonKey);\n    commandInstance.execute(note);\n};\n\n/**\n * Register a particular SimpleCommand or MacroCommand class as the handler for \n * a particular Notification.\n *\n * If an command already been registered to handle Notifications with this name, \n * it is no longer used, the new command is used instead.\n *\n * The Observer for the new command is only created if this the irst time a\n * command has been regisered for this Notification name.\n *\n * @param {string} notificationName\n *  the name of the Notification\n * @param {Function} commandClassRef\n *  a command constructor\n * @return {void}\n */\nController.prototype.registerCommand= function(notificationName, commandClassRef)\n{\n    if(this.commandMap[notificationName] == null)\n    {\n        this.view.registerObserver(notificationName, new Observer(this.executeCommand, this));\n    }\n\n    this.commandMap[notificationName]= commandClassRef;\n};\n\n/**\n * Check if a command is registered for a given Notification\n *\n * @param {string} notificationName\n * @return {boolean}\n *  whether a Command is currently registered for the given notificationName.\n */\nController.prototype.hasCommand= function(notificationName)\n{\n    return this.commandMap[notificationName] != null;\n};\n\n/**\n * Remove a previously registered command to\n * {@link puremvc.Notification Notification}\n * mapping.\n *\n * @param {string} notificationName\n *  the name of the Notification to remove the command mapping for\n * @return {void}\n */\nController.prototype.removeCommand= function(notificationName)\n{\n    if(this.hasCommand(notificationName))\n    {\n        this.view.removeObserver(notificationName, this);\n        this.commandMap[notificationName]= null;\n    }\n};\n\n/**\n * @static\n * Remove a Controller instance.\n *\n * @param {string} key \n *  multitonKey of Controller instance to remove\n * @return {void}\n */\nController.removeController= function(key)\n{\n    delete this.instanceMap[key];\n};\n\n/**\n * Local reference to the Controller's View\n * \n * @protected\n * @type {puremvc.View}\n */\nController.prototype.view= null;\n\n/**\n * Note name to command constructor mappings\n * \n * @protected\n * @type {Object}\n */\nController.prototype.commandMap= null;\n\n/**\n * The Controller's multiton key\n * \n * @protected\n * @type {string}\n */\nController.prototype.multitonKey= null;\n\n/**\n * Multiton key to Controller instance mappings\n * \n * @static\n * @protected\n * @type {Object}\n */\nController.instanceMap= [];\n\n/**\n * @ignore\n * \n * Message constants\n * @static\n * @protected\n * @type {string}\n */\nController.MULTITON_MSG= \"controller key for this Multiton key already constructed\"\n/*\n * @author PureMVC JS Native Port by David Foley, Frédéric Saunier, & Alain Duchesneau \n * @author Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * \n * @hide\n * A an internal helper class used to assist classlet implementation. This\n * class is not accessible by client code.\n */\nvar OopHelp=\n{\n    /*\n     * @private\n     * A reference to the global scope. We use this rather than window\n     * in order to support both browser based and non browser baed \n     * JavaScript interpreters.\n     * @type {Object}\n     */\n\tglobal: (function(){return this})()\n    \n    /*\n     * @private\n     * Extend one Function's prototype by another, emulating classic\n     * inheritance.\n     * \n     * @param {Function} child\n     *  The Function to extend (subclass)\n     * \n     * @param {Function} parent\n     *  The Function to extend from (superclass)\n     * \n     * @return {Function}\n     * \n     *  A reference to the extended Function (subclass)\n     */\n,   extend: function (child, parent)\n    {\n        if ('function' !== typeof child)\n            throw new TypeError('#extend- child should be Function');            \n        \n        if ('function' !== typeof parent)\n            throw new TypeError('#extend- parent should be Function');\n            \n        if (parent === child)\n            return;\n            \n        var Transitive= new Function;\n        Transitive.prototype= parent.prototype;\n        child.prototype= new Transitive;\n        return child.prototype.constructor= child;\n    }\n    \n    /*\n     * @private\n     * Decoarate one object with the properties of another. \n     * \n     * @param {Object} object\n     *  The object to decorate.\n     * \n     * @param {Object} traits\n     *  The object providing the properites that the first object\n     *  will be decorated with. Note that only properties defined on \n     *  this object will be copied- i.e. inherited properties will\n     *  be ignored.\n     * \n     * @return {Object}\n     *  THe decorated object (first argument)\n     */\n,   decorate: function (object, traits)\n    {   \n        for (var accessor in traits)\n        {\n            object[accessor]= traits[accessor];\n        }    \n        \n        return object;\n    }\n};\n\n\n/**\n * @member puremvc\n * \n * Declare a namespace and optionally make an Object the referent\n * of that namespace.\n * \n *     console.assert(null == window.tld, 'No tld namespace');\n *     // declare the tld namespace\n *     puremvc.declare('tld');\n *     console.assert('object' === typeof tld, 'The tld namespace was declared');\n * \n *     // the method returns a reference to last namespace node in a created hierarchy\n *     var reference= puremvc.declare('tld.domain.app');\n *     console.assert(reference === tld.domain.app)\n *    \n *     // of course you can also declare your own objects as well\n *     var AppConstants=\n *         {\n * \t           APP_NAME: 'tld.domain.app.App'\n *         };\n * \n *     puremvc.declare('tld.domain.app.AppConstants', AppConstants);\n *     console.assert(AppConstants === tld.domain.app.AppConstants\n * \t   , 'AppConstants was exported to the namespace');\n * \n * Note that you can also #declare within a closure. That way you\n * can selectively export Objects to your own namespaces without\n * leaking variables into the global scope.\n *    \n *     (function(){\n *         // this var is not accessible outside of this\n *         // closures call scope\n *         var hiddenValue= 'defaultValue';\n * \n *         // export an object that references the hidden\n *         // variable and which can mutate it\n *         puremvc.declare\n *         (\n *              'tld.domain.app.backdoor'\n * \n *         ,    {\n *                  setValue: function (value)\n *                  {\n *                      // assigns to the hidden var\n *                      hiddenValue= value;\n *                  }\n * \n *         ,        getValue: function ()\n *                  {\n *                      // reads from the hidden var\n *                      return hiddenValue;\n *                  }\n *              }\n *         );\n *     })();\n *     // indirectly retrieve the hidden variables value\n *     console.assert('defaultValue' === tld.domain.app.backdoor.getValue());\n *     // indirectly set the hidden variables value\n *     tld.domain.app.backdoor.setValue('newValue');\n *     // the hidden var was mutated\n *     console.assert('newValue' === tld.domain.app.backdoor.getValue());\n * \n * On occasion, primarily during testing, you may want to use declare, \n * but not have the global object be the namespace root. In these cases you\n * can supply the optional third scope argument.\n * \n *     var localScope= {}\n *     ,   object= {}\n * \n *     puremvc.declare('mock.object', object, localScope);\n * \n *     console.assert(null == window.mock, 'mock namespace is not in global scope');\n *     console.assert(object === localScope.mock.object, 'mock.object is available in localScope');    \n * \n * @param {string} string\n *  A qualified object name, e.g. 'com.example.Class'\n * \n * @param {Object} [object]\n *  An object to make the referent of the namespace. \n * \n * @param {Object} [scope]\n *  The namespace's root node. If not supplied, the global\n *  scope will be namespaces root node.\n * \n * @return {Object}\n * \n *  A reference to the last node of the Object hierarchy created.\n */\nfunction declare (qualifiedName, object, scope)\n{\n    var nodes= qualifiedName.split('.')\n    ,   node= scope || OopHelp.global\n    ,   lastNode\n    ,   newNode\n    ,   nodeName;\n                \n    for (var i= 0, n= nodes.length; i < n; i++)\n    {\n        lastNode= node;\n        nodeName= nodes[i];\n        \n        node= (null == node[nodeName] ? node[nodeName] = {} : node[nodeName]);\n    }\n                    \n    if (null == object)\n        return node;\n                        \n    return lastNode[nodeName]= object;\n};\n\n\n\n\n/**\n * @member puremvc\n * \n * Define a new classlet. Current editions of JavaScript do not have classes,\n * but they can be emulated, and this method does this for you, saving you\n * from having to work with Function prototype directly. The method does\n * not extend any Native objects and is entirely opt in. Its particularly\n * usefull if you want to make your PureMvc applications more portable, by\n * decoupling them from a specific OOP abstraction library.\n * \n * \n *     puremvc.define\n *     (\n *         // the first object supplied is a class descriptor. None of these\n *         // properties are added to your class, the exception being the\n *         // constructor property, which if supplied, will be your classes\n *         // constructor.\n *         {\n *             // your classes namespace- if supplied, it will be \n *             // created for you\n *             name: 'com.example.UserMediator'\n * \n *             // your classes parent class. If supplied, inheritance \n *             // will be taken care of for you\n *         ,   parent: puremvc.Mediator\n * \n *             // your classes constructor. If not supplied, one will be \n *             // created for you\n *         ,   constructor: function UserMediator (component)\n *             {\n *                  puremvc.Mediator.call(this, this.constructor.NAME, component);  \n *             }\n *         }\n *         \n *         // the second object supplied defines your class traits, that is\n *         // the properties that will be defined on your classes prototype\n *         // and thereby on all instances of this class\n *     ,   {\n *             businessMethod: function ()\n *             {\n *                 // impl \n *             }\n *         }\n * \n *         // the third object supplied defines your classes 'static' traits\n *         // that is, the methods and properties which will be defined on\n *         // your classes constructor\n *     ,   {\n *             NAME: 'userMediator'\n *         }\n *     );\n * \n * @param {Object} [classinfo]\n *  An object describing the class. This object can have any or all of\n *  the following properties:\n * \n *  - name: String  \n *      The classlets name. This can be any arbitrary qualified object\n *      name. 'com.example.Classlet' or simply 'MyClasslet' for example \n *      The method will automatically create an object hierarchy refering\n *      to your class for you. Note that you will need to capture the \n *      methods return value to retrieve a reference to your class if the\n *      class name property is not defined.\n\n *  - parent: Function\n *      The classlets 'superclass'. Your class will be extended from this\n *      if supplied.\n * \n *  - constructor: Function\n *      The classlets constructor. Note this is *not* a post construct \n *      initialize method, but your classes constructor Function.\n *      If this attribute is not defined, a constructor will be created for \n *      you automatically. If you have supplied a parent class\n *      value and not defined the classes constructor, the automatically\n *      created constructor will invoke the super class constructor\n *      automatically. If you have supplied your own constructor and you\n *      wish to invoke it's super constructor, you must do this manually, as\n *      there is no reference to the classes parent added to the constructor\n *      prototype.\n *      \n *  - scope: Object.\n *      For use in advanced scenarios. If the name attribute has been supplied,\n *      this value will be the root of the object hierarchy created for you.\n *      Use it do define your own class hierarchies in private scopes,\n *      accross iFrames, in your unit tests, or avoid collision with third\n *      party library namespaces.\n * \n * @param {Object} [traits]\n *  An Object, the properties of which will be added to the\n *  class constructors prototype.\n * \n * @param {Object} [staitcTraits]\n *  An Object, the properties of which will be added directly\n *  to this class constructor\n * \n * @return {Function}\n *  A reference to the classlets constructor\n */\nfunction define (classInfo, traits, staticTraits)\n{\n    if (!classInfo)\n    {\n        classInfo= {}\n    }\n\n    var className= classInfo.name\n    ,   classParent= classInfo.parent\n    ,   doExtend= 'function' === typeof classParent\n    ,   classConstructor\n    ,   classScope= classInfo.scope || null\n    ,   prototype\n\n    if ('parent' in classInfo && !doExtend)\n    {\n        throw new TypeError('Class parent must be Function');\n    }\n        \n    if (classInfo.hasOwnProperty('constructor'))\n    {\n        classConstructor= classInfo.constructor\n        if ('function' !== typeof classConstructor)\n        {\n            throw new TypeError('Class constructor must be Function')\n        }   \n    }\n    else // there is no constructor, create one\n    {\n        if (doExtend) // ensure to call the super constructor\n        {\n            classConstructor= function ()\n            {\n                classParent.apply(this, arguments);\n            }\n        }\n        else // just create a Function\n        {\n            classConstructor= new Function;\n        } \n    }\n\n    if (doExtend)\n    {\n        OopHelp.extend(classConstructor, classParent);\n    }\n    \n    if (traits)\n    {\n        prototype= classConstructor.prototype\n        OopHelp.decorate(prototype, traits);\n        // reassign constructor \n        prototype.constructor= classConstructor;\n    }\n    \n    if (staticTraits)\n    {\n        OopHelp.decorate(classConstructor, staticTraits)\n    }\n    \n    if (className)\n    {\n        if ('string' !== typeof className)\n        {\n            throw new TypeError('Class name must be primitive string');\n        }\n            \n        declare (className, classConstructor, classScope);\n    }    \n    \n    return classConstructor;            \n};\n\n\n\t\n \t/* implementation end */\n \t \n \t// define the puremvc global namespace and export the actors\nvar puremvc =\n \t{\n \t\tView: View\n \t,\tModel: Model\n \t,\tController: Controller\n \t,\tSimpleCommand: SimpleCommand\n \t,\tMacroCommand: MacroCommand\n \t,\tFacade: Facade\n \t,\tMediator: Mediator\n \t,\tObserver: Observer\n \t,\tNotification: Notification\n \t,\tNotifier: Notifier\n \t,\tProxy: Proxy\n \t,\tdefine: define\n \t,\tdeclare: declare\n \t};\n\n\n\nmodule.exports = puremvc;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	eval("/**\n * @fileOverview\n * PureMVC State Machine Utility JS Native Port by Saad Shams\n * Copyright(c) 2006-2012 Futurescale, Inc., Some rights reserved.\n * Reuse governed by Creative Commons Attribution 3.0 \n * http://creativecommons.org/licenses/by/3.0/us/\n * @author saad.shams@puremvc.org \n */\n\nvar puremvc = __webpack_require__( 3 );\n    \n/**\n * Constructor\n *\n * Defines a State.\n * @method State\n * @param {string} name id the id of the state\n * @param {string} entering an optional notification name to be sent when entering this state\n * @param {string} exiting an optional notification name to be sent when exiting this state\n * @param {string} changed an optional notification name to be sent when fully transitioned to this state\n * @return \n */\n\nfunction State(name, entering, exiting, changed) {  \n    this.name = name;\n    if(entering) this.entering = entering;\n    if(exiting) this.exiting = exiting;\n    if(changed) this.changed = changed;\n    this.transitions = {};\n}\n\n/**\n * Define a transition.\n * @method defineTrans\n * @param {string} action the name of the StateMachine.ACTION Notification type.\n * @param {string} target the name of the target state to transition to.\n * @return \n */\nState.prototype.defineTrans = function(action, target) {\n    if(this.getTarget(action) != null) return;\n    this.transitions[action] = target;\n}\n\n/**\n * Remove a previously defined transition.\n * @method removeTrans\n * @param {string} action\n * @return \n */\nState.prototype.removeTrans = function(action) {\n    delete this.transitions[action];\n}\n\n/**\n * Get the target state name for a given action.\n * @method getTarget\n * @param {string} action\n * @return State\n */\n/**\n * \n */\nState.prototype.getTarget = function(action) {\n    return this.transitions[action] ? this.transitions[action] : null;\n}\n\n// The state name\nState.prototype.name = null;\n\n// The notification to dispatch when entering the state\nState.prototype.entering = null;\n\n// The notification to dispatch when exiting the state\nState.prototype.exiting = null;\n\n// The notification to dispatch when the state has actually changed\nState.prototype.changed = null;\n\n/**\n *  Transition map of actions to target states\n */ \nState.prototype.transitions = null;\n    \n\n    \n /**\n * A Finite State Machine implimentation.\n * <P>\n * Handles regisistration and removal of state definitions, \n * which include optional entry and exit commands for each \n * state.</P>\n */\n\n/**\n * Constructor\n *\n * @method StateMachine\n * @return \n */\nfunction StateMachine() {\n    puremvc.Mediator.call(this, StateMachine.NAME, null);\n    this.states = {};\n}\n    \nStateMachine.prototype = new puremvc.Mediator;\nStateMachine.prototype.constructor = StateMachine;\n\n/**\n * Transitions to initial state once registered with Facade\n * @method onRegister\n * @return \n */\nStateMachine.prototype.onRegister = function() {\n    if(this.initial) this.transitionTo(this.initial, null);\n}\n\n/**\n * Registers the entry and exit commands for a given state.\n * @method registerState\n * @param {State} state the state to which to register the above commands\n * @param {boolean} initial boolean telling if this is the initial state of the system\n * @return \n */\nStateMachine.prototype.registerState = function(state, initial) {\n    if(state == null || this.states[state.name] != null) return;\n    this.states[state.name] = state;\n    if(initial) this.initial = state;\n}\n\n/**\n * Remove a state mapping. Removes the entry and exit commands for a given state as well as the state mapping itself.\n * @method removeState\n * @param {string} stateName\n * @return \n */\nStateMachine.prototype.removeState = function(stateName) {\n    var state = this.states[stateName];\n    if(state == null) return;\n    this.states[stateName] = null;\n}\n\n/**\n * Transitions to the given state from the current state.\n * <P>\n * Sends the <code>exiting</code> notification for the current state \n * followed by the <code>entering</code> notification for the new state.\n * Once finally transitioned to the new state, the <code>changed</code> \n * notification for the new state is sent.</P>\n * <P>\n * If a data parameter is provided, it is included as the body of all\n * three state-specific transition notes.</P>\n * <P>\n * Finally, when all the state-specific transition notes have been\n * sent, a <code>StateMachine.CHANGED</code> note is sent, with the\n * new <code>State</code> object as the <code>body</code> and the name of the \n * new state in the <code>type</code>.\n *\n * @method transitionTo\n * @param {State} nextState the next State to transition to.\n * @param {Object} data is the optional Object that was sent in the <code>StateMachine.ACTION</code> notification body\n * @return \n */\nStateMachine.prototype.transitionTo = function(nextState, data) {\n    // Going nowhere?\n    if(nextState == null) return;\n    \n    // Clear the cancel flag\n    this.canceled = false;\n    \n    // Exit the current State \n    if(this.getCurrentState() && this.getCurrentState().exiting) \n        this.sendNotification(this.getCurrentState().exiting, data, nextState.name);\n    \n    // Check to see whether the exiting guard has canceled the transition\n    if(this.canceled) {\n        this.canceled = false;\n        return;\n    }\n    \n    // Enter the next State \n    if(nextState.entering)\n        this.sendNotification(nextState.entering, data);\n    \n    // Check to see whether the entering guard has canceled the transition\n    if(this.canceled) {\n        this.canceled = false;\n        return;\n    }\n    \n    // change the current state only when both guards have been passed\n    this.setCurrentState(nextState);\n    \n    // Send the notification configured to be sent when this specific state becomes current \n    if(nextState.changed) {\n        this.sendNotification(this.getCurrentState().changed, data);\n    }\n    \n    // Notify the app generally that the state changed and what the new state is \n    this.sendNotification(StateMachine.CHANGED, this.getCurrentState(), this.getCurrentState().name);\n}\n\n/**\n * Notification interests for the StateMachine.\n * @method listNotificationInterests\n * @return {Array} Array of Notifications\n */\n\nStateMachine.prototype.listNotificationInterests = function() {\n    return [\n        StateMachine.ACTION,\n        StateMachine.CANCEL\n    ];\n}\n\n/**\n * Handle notifications the <code>StateMachine</code> is interested in.\n * <P>\n * <code>StateMachine.ACTION</code>: Triggers the transition to a new state.<BR>\n * <code>StateMachine.CANCEL</code>: Cancels the transition if sent in response to the exiting note for the current state.<BR>\n *\n * @method handleNotification\n * @param {Notification} notification\n * @return \n */\nStateMachine.prototype.handleNotification = function(notification) {\n    switch(notification.getName()) {\n        case StateMachine.ACTION:\n            var action = notification.getType();\n            var target = this.getCurrentState().getTarget(action);\n            var newState = this.states[target];\n            if(newState) this.transitionTo(newState, notification.getBody());\n            break;\n            \n        case StateMachine.CANCEL:\n            this.canceled = true;\n            break;\n    }\n}\n\n/**\n * Get the current state.\n * @method getCurrentState\n * @return a State defining the machine's current state\n */\nStateMachine.prototype.getCurrentState = function() {\n    return this.viewComponent;\n}\n\n/**\n * Set the current state.\n * @method setCurrentState\n * @param {State} state\n * @return \n */\nStateMachine.prototype.setCurrentState = function(state) {\n    this.viewComponent = state;\n}\n\n/**\n * Map of States objects by name.\n */\nStateMachine.prototype.states = null;\n\n/**\n * The initial state of the FSM.\n */\nStateMachine.prototype.initial = null;\n\n/**\n * The transition has been canceled.\n */\nStateMachine.prototype.canceled = null;\n    \nStateMachine.NAME = \"StateMachine\";\n\n/**\n * Action Notification name. \n */ \nStateMachine.ACTION = StateMachine.NAME + \"/notes/action\";\n\n/**\n *  Changed Notification name  \n */ \nStateMachine.CHANGED = StateMachine.NAME + \"/notes/changed\";\n\n/**\n *  Cancel Notification name  \n */ \nStateMachine.CANCEL = StateMachine.NAME + \"/notes/cancel\";\n    \n    \n/**\n * Creates and registers a StateMachine described in JSON.\n * \n * <P>\n * This allows reconfiguration of the StateMachine \n * without changing any code, as well as making it \n * easier than creating all the <code>State</code> \n * instances and registering them with the \n * <code>StateMachine</code> at startup time.\n * \n * @ see State\n * @ see StateMachine\n */\n\n/**\n * Constructor\n * @method FSMInjector\n * @param {Object} fsm JSON Object\n * @return \n */\nfunction FSMInjector(fsm) {\n    puremvc.Notifier.call(this);\n    this.fsm = fsm;\n}\n  \nFSMInjector.prototype = new puremvc.Notifier;\nFSMInjector.prototype.constructor = FSMInjector;\n\n/**\n * Inject the <code>StateMachine</code> into the PureMVC apparatus.\n * <P>\n * Creates the <code>StateMachine</code> instance, registers all the states\n * and registers the <code>StateMachine</code> with the <code>IFacade</code>.\n * @method inject\n * @return \n */\nFSMInjector.prototype.inject = function() {\n    // Create the StateMachine\n    var stateMachine = new puremvc.statemachine.StateMachine();\n    \n    // Register all the states with the StateMachine\n    var states = this.getStates();\n    for(var i=0; i<states.length; i++) {\n        stateMachine.registerState(states[i], this.isInitial(states[i].name));\n    }\n    \n    // Register the StateMachine with the facade\n    this.facade.registerMediator(stateMachine);\n}\n\n/**\n * Get the state definitions.\n * <P>\n * Creates and returns the array of State objects \n * from the FSM on first call, subsequently returns\n * the existing array.</P>\n *\n * @method getStates\n * @return {Array} Array of States\n */\nFSMInjector.prototype.getStates = function() {\n    if(this.stateList == null) {\n        this.stateList = [];\n\n        var stateDefs = this.fsm.state ? this.fsm.state : [];\n        for(var i=0; i<stateDefs.length; i++) {\n            var stateDef = stateDefs[i];\n            var state = this.createState(stateDef);\n            this.stateList.push(state);\n        }\n    }\n    return this.stateList;\n}\n\n/**\n * Creates a <code>State</code> instance from its JSON definition.\n * @method createState\n * @param {Object} stateDef JSON Object\n * @return {State} \n */\n/**\n\n */\nFSMInjector.prototype.createState = function(stateDef) {\n    // Create State object\n    var name = stateDef['@name'];\n    var exiting = stateDef['@exiting'];\n    var entering = stateDef['@entering'];\n    var changed = stateDef['@changed'];\n    var state = new puremvc.statemachine.State(name, entering, exiting, changed);\n    \n    // Create transitions\n    var transitions = stateDef.transition ? stateDef.transition : [];\n    for(var i=0; i<transitions.length; i++) {\n        var transDef = transitions[i];\n        state.defineTrans(transDef['@action'], transDef['@target']);\n    }\n    return state;\n}\n\n/**\n * Is the given state the initial state?\n * @method isInitial\n * @param {string} stateName\n * @return {boolean}\n */\nFSMInjector.prototype.isInitial = function(stateName) {\n    var initial = this.fsm['@initial'];\n    return stateName == initial;\n}\n\n// The JSON FSM definition\nFSMInjector.prototype.fsm = null;\n\n// The List of State objects\nFSMInjector.prototype.stateList = null;\n\n\npuremvc.statemachine =\n{\n    State: State\n    ,\tStateMachine: StateMachine\n    ,\tFSMInjector: FSMInjector\n};\n\nmodule.exports = puremvc.statemachine;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _StartCommand = __webpack_require__(6);\n\nObject.defineProperty(exports, 'StartCommand', {\n  enumerable: true,\n  get: function () {\n    return _StartCommand.StartCommand;\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9jbGllbnQvc3JjL2NvbnRyb2xsZXIvY29tbWFuZC9pbmRleC5qcz9iNTE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGxlbyBvbiAyMDE2LzgvMS5cclxuICovXHJcblxyXG5leHBvcnQge1N0YXJ0Q29tbWFuZH0gZnJvbSAnLi9TdGFydENvbW1hbmQnO1xyXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBjbGllbnQvc3JjL2NvbnRyb2xsZXIvY29tbWFuZC9pbmRleC5qc1xuICoqLyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFJQTs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StartCommand = undefined;\n\nvar _puremvc = __webpack_require__(2);\n\nclass StartCommand extends _puremvc.puremvc.SimpleCommand {\n  /** @override */\n  execute(notification) {\n    cc.log('in start cmd');\n    // register proxy\n    // this.facade.registerProxy(new GameProxy() );\n\n    // register mediator\n    // this.facade.registerMediator(new DirectorMediator());\n    // this.facade.registerMediator(new SceneMediator());\n    // this.facade.registerMediator(new GameMediator());\n  }\n}\nexports.StartCommand = StartCommand; /**\r\n                                      * Created by leo on 2016/8/1.\r\n                                      */\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9jbGllbnQvc3JjL2NvbnRyb2xsZXIvY29tbWFuZC9TdGFydENvbW1hbmQuanM/ZDA3YiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBsZW8gb24gMjAxNi84LzEuXHJcbiAqL1xyXG5cclxuaW1wb3J0IHtwdXJlbXZjfSBmcm9tICdwdXJlbXZjJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGFydENvbW1hbmQgZXh0ZW5kcyBwdXJlbXZjLlNpbXBsZUNvbW1hbmQge1xyXG4gIC8qKiBAb3ZlcnJpZGUgKi9cclxuICBleGVjdXRlKG5vdGlmaWNhdGlvbikge1xyXG4gICAgY2MubG9nKCdpbiBzdGFydCBjbWQnKTtcclxuICAgIC8vIHJlZ2lzdGVyIHByb3h5XHJcbiAgICAvLyB0aGlzLmZhY2FkZS5yZWdpc3RlclByb3h5KG5ldyBHYW1lUHJveHkoKSApO1xyXG5cclxuICAgIC8vIHJlZ2lzdGVyIG1lZGlhdG9yXHJcbiAgICAvLyB0aGlzLmZhY2FkZS5yZWdpc3Rlck1lZGlhdG9yKG5ldyBEaXJlY3Rvck1lZGlhdG9yKCkpO1xyXG4gICAgLy8gdGhpcy5mYWNhZGUucmVnaXN0ZXJNZWRpYXRvcihuZXcgU2NlbmVNZWRpYXRvcigpKTtcclxuICAgIC8vIHRoaXMuZmFjYWRlLnJlZ2lzdGVyTWVkaWF0b3IobmV3IEdhbWVNZWRpYXRvcigpKTtcclxuICB9XHJcbn1cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBjbGllbnQvc3JjL2NvbnRyb2xsZXIvY29tbWFuZC9TdGFydENvbW1hbmQuanNcbiAqKi8iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWEE7QUFBQTs7Iiwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ]);